package javafixes.object.dynamic;

import javafixes.common.function.ValueHandler;
import javafixes.common.function.ValueMapper;
import javafixes.object.Triple;
import javafixes.object.Tuple;
import javafixes.object.Value;

import java.util.List;
import java.util.Optional;
import java.util.function.Function;

import static javafixes.collection.CollectionUtil.newList;
import static javafixes.object.Triple.triple;
import static javafixes.object.Tuple.tuple;

/**
 * {@code DynamicValue} is intended as wrapper of value that could change over time and whose changes should propagate
 * to other values automatically.
 * <p>
 * <p>A good usage example would be a config from which other values could be derived and should be changed
 * once config changes.
 *
 * @param <T> type of wrapped value
 * @author mtymes
 */
// todo: put into README
// todo: remaining javadoc
// todo: test default and static methods
public interface DynamicValue<T> extends Value<T> {

    /**
     * @return optional name of {@code DynamicValue}
     */
    Optional<String> name();

    /**
     * Indicator of how often has the value wrapped changed.
     * By default should start with zero and each time the underlying value changes the {@code valueVersion} should
     * increase by one.
     *
     * @return number indicator of current wrapped version
     */
    long valueVersion();

    /**
     * Creates a new {@link DerivedValue} from this {@code DynamicValue}.
     * Each time the generated {@link DerivedValue} will be used and this value will change, the {@link DerivedValue}
     * will regenerate it's value using the provided {@code derivedValueMapper}
     *
     * @param derivedValueMapper function that is applied to this {@code DynamicValue}'s wrapped value to generate new {@link DerivedValue}'s value
     * @param <T2>               type of newly generated {@link DerivedValue}
     * @return generated {@link DerivedValue}
     */
    default <T2> DerivedValue<T2, T> map(Function<T, ? extends T2> derivedValueMapper) {
        return new DerivedValue<>(Optional.empty(), this, derivedValueMapper, Optional.empty());
    }

    /**
     * Generates a value using the current {@code DynamicValue}'s wrapped value
     * @param valueMapper function that is applied to currently wrapped value
     * @param <T2>        type of generated value
     * @param <E>         {@link Throwable} type, in case the {@code valueMapper} function should throw an {@link Throwable}
     * @return generated value
     * @throws E exception generated by {@code valueMapper} function
     */
    default <T2, E extends Throwable> T2 mapToValue(ValueMapper<? super T, ? extends T2, E> valueMapper) throws E {
        return valueMapper.map(value());
    }

    default <E extends Throwable> void handleCurrentValue(ValueHandler<? super T, ? extends E> valueHandler) throws E {
        valueHandler.handle(value());
    }

    static <T1, T2> DerivedValue<Tuple<T1, T2>, ?> join(DynamicValue<T1> value1, DynamicValue<T2> value2) {
        return ((DynamicValue<List<Object>>) new DerivedMultiValue(newList(value1, value2)))
                .map(values -> tuple(
                        (T1) values.get(0),
                        (T2) values.get(1)
                ));
    }

    static <T1, T2, T3> DerivedValue<Triple<T1, T2, T3>, ?> join(DynamicValue<T1> value1, DynamicValue<T2> value2, DynamicValue<T3> value3) {
        return ((DynamicValue<List<Object>>) new DerivedMultiValue(newList(value1, value2, value3)))
                .map(values -> triple(
                        (T1) values.get(0),
                        (T2) values.get(1),
                        (T3) values.get(2)
                ));
    }

    static <T> DynamicValue<List<T>> join(List<DynamicValue<T>> values) {
        return new DerivedMultiValue<>(values);
    }
}
